package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/AlexEagle1535/market-rent-bot/db"
	"github.com/AlexEagle1535/market-rent-bot/menu"
	"github.com/AlexEagle1535/market-rent-bot/states"

	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"
)

func Start(ctx *th.Context, msg telego.Message) error {
	err := sendMenu(ctx, msg)
	if err != nil {
		return err
	}
	return nil
}

func CallbackQuery(ctx *th.Context, query telego.CallbackQuery) error {
	if query.Message == nil {
		log.Println("‚ö†Ô∏è CallbackQuery.Message is nil ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –æ—Ç inline-–∫–Ω–æ–ø–∫–∏ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
		return nil
	}
	message := query.Message.Message()
	if message == nil {
		return nil
	}

	var newText string
	var newMarkup *telego.InlineKeyboardMarkup
	var err error

	switch {
	// === –û–±—â–µ–µ ===
	case query.Data == "go_back":
		role, err := db.GetUserRole(query.From.ID, query.From.Username)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", query.From.ID, err)
			return err
		}
		states.Set(query.From.ID, "main_menu")
		if role == "admin" {
			newText = "üîê –ê–¥–º–∏–Ω –º–µ–Ω—é"
			newMarkup = menu.Admin()
		} else {
			newText = "üë§ –ú–µ–Ω—é –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞"
			newMarkup = menu.Tenant()
		}

	// === –ê–¥–º–∏–Ω ===
	case query.Data == "admin_tenants":
		newText = "üßë‚Äçüíº –†–∞–∑–¥–µ–ª: –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã"
		newMarkup = menu.AdminTenants()

	case query.Data == "admin_broadcast":
		newText = "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)."
		newMarkup = menu.BackButton("go_back")

	case query.Data == "admin_approvals":
		newText = "‚úÖ –ó–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)."
		newMarkup = menu.BackButton("go_back")

	// === –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ===
	case query.Data == "import_csv":
		newText = "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤ –∏–∑ CSV (–∑–∞–≥–ª—É—à–∫–∞)."
		newMarkup = menu.BackButton("go_back")

	// case query.Data == "list_tenants":
	// 	newText = "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤:\n1. –ò–ü –ò–≤–∞–Ω–æ–≤\n2. –û–û–û –†—ã–Ω–æ–∫\n(–∑–∞–≥–ª—É—à–∫–∞)"
	// 	newMarkup = menu.BackButton("go_back")

	case query.Data == "admin_users":
		newText = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã"
		newMarkup = menu.AdminUsers()

	case query.Data == "add_user":
		newText = "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
		newMarkup = menu.AddUser()

	case query.Data == "add_admin":
		newText = "–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
		states.Set(query.From.ID, "awaiting_admin_data")
		newMarkup = menu.BackButton("go_back")

	case query.Data == "add_tenant":
		newText = "–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞:"
		states.Set(query.From.ID, "awaiting_tenant_data")
		newMarkup = menu.BackButton("go_back")

	case query.Data == "list_users":
		states.UpdateListState(query.From.ID, func(s *states.ListState) {
			s.Scope = "users"
			s.Page = 0
		})
		newText, newMarkup, err = buildUserList(query.From.ID)
		if err != nil {
			return err
		}

	case query.Data == "admin_market":
		newText = "üß∫ –†—ã–Ω–æ–∫"
		newMarkup = menu.AdminMarket()

	case query.Data == "pavilions":
		var pavilions []db.Pavilion
		pavilions, err = db.GetAllPavilions()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞–≤–∏–ª—å–æ–Ω–æ–≤: %v", err)
		}
		newText = "üè™ –ü–∞–≤–∏–ª—å–æ–Ω—ã"
		state := states.GetListState(query.From.ID) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
		state.Scope = "pavilions"
		state.Page = 0
		newMarkup = menu.AdminPavilionList(pavilions, state)

	case query.Data == "add_pavilion":
		newText = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–æ–≤–æ–≥–æ –ø–∞–≤–∏–ª—å–æ–Ω–∞:"
		states.Set(query.From.ID, "adding_pavilion_number")
		newMarkup = menu.BackButton("pavilions")

	case query.Data == "list_tenants":
		var tenants []db.Tenant
		tenants, err = db.GetAllTenants()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤: %v", err)
			return err
		}
		newText = "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤"
		state := states.GetListState(query.From.ID) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ
		state.Scope = "tenants"
		state.Page = 0
		newMarkup = menu.AdminTenantsList(tenants, state)

	case query.Data == "add_tenant":
		newText = "–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞:"
		states.Set(query.From.ID, "awaiting_tenant_data")
		newMarkup = menu.BackButton("list_tenants")

	case strings.HasPrefix(query.Data, "select_activity_type:"):
		idStr := strings.TrimPrefix(query.Data, "select_activity_type:")
		selectedID, _ := strconv.Atoi(idStr)

		selectedIDs := toggleActivitySelection(query.From.ID, selectedID)

		activityTypes, err := db.GetAllActivityTypes()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: %v", err)
			return err
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ map[int]bool
		selectedMap := make(map[int]bool)
		for _, id := range selectedIDs {
			selectedMap[id] = true
		}
		newText = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞:"
		newMarkup = menu.AdminActivityTypeSelect(activityTypes, selectedMap)

	case query.Data == "finish_activity_selection":
		rawIDs, ok := states.GetTemp(query.From.ID, "selected_activity_ids")
		tenantIDStr, ok2 := states.GetTemp(query.From.ID, "tenant_id")
		if !ok || !ok2 || rawIDs == "" {
			newText = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
			newMarkup = menu.BackButton("list_tenants")
			break
		}

		tenantID, _ := strconv.Atoi(tenantIDStr)
		var activityIDs []int
		for _, idStr := range strings.Split(rawIDs, ",") {
			id, err := strconv.Atoi(idStr)
			if err == nil {
				activityIDs = append(activityIDs, id)
			}
		}

		err := db.SaveTenantActivityTypes(tenantID, activityIDs)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: %v", err)
			newText = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
			newMarkup = menu.BackButton("list_tenants")
		} else {
			newText = "‚úÖ –í–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
			newMarkup = menu.OkButton("list_tenants")
		}

		states.ClearTemp(query.From.ID)
		states.Set(query.From.ID, "main_menu")

	case query.Data == "page_next":
		states.UpdateListState(query.From.ID, func(s *states.ListState) {
			s.Page++
		})
		state := states.GetListState(query.From.ID)
		switch state.Scope {
		case "users":
			newText, newMarkup, err = buildUserList(query.From.ID)
		case "pavilions":
			pavs, err := db.GetAllPavilions()
			if err != nil {
				return err
			}
			newText = "üè™ –ü–∞–≤–∏–ª—å–æ–Ω—ã"
			newMarkup = menu.AdminPavilionList(pavs, state)
		case "activity_types":
			activityTypes, err := db.GetAllActivityTypes()
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: %v", err)
				return err
			}
			newText = "üßë‚Äçüåæ –í–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
			newMarkup = menu.AdminActivityTypesList(activityTypes, state)
		case "tenants":
			tenants, err := db.GetAllTenants()
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤: %v", err)
				return err
			}
			newText = "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤"
			newMarkup = menu.AdminTenantsList(tenants, state)
		}

	case query.Data == "page_prev":
		states.UpdateListState(query.From.ID, func(s *states.ListState) {
			if s.Page > 0 {
				s.Page--
			}
		})
		state := states.GetListState(query.From.ID)
		switch state.Scope {
		case "users":
			newText, newMarkup, err = buildUserList(query.From.ID)
		case "pavilions":
			pavs, err := db.GetAllPavilions()
			if err != nil {
				return err
			}
			newText = "üè™ –ü–∞–≤–∏–ª—å–æ–Ω—ã"
			newMarkup = menu.AdminPavilionList(pavs, state)
		case "activity_types":
			activityTypes, err := db.GetAllActivityTypes()
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: %v", err)
				return err
			}
			newText = "üßë‚Äçüåæ –í–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
			newMarkup = menu.AdminActivityTypesList(activityTypes, state)
		case "tenants":
			tenants, err := db.GetAllTenants()
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤: %v", err)
				return err
			}
			newText = "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤"
			newMarkup = menu.AdminTenantsList(tenants, state)
		}

	case strings.HasPrefix(query.Data, "view_pavilion:"):
		id := strings.Split(query.Data, ":")
		if len(id) < 2 {
			log.Printf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞–≤–∏–ª—å–æ–Ω–∞: %s", query.Data)
			return nil
		}
		pavilionID, err := strconv.Atoi(id[1])
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID –ø–∞–≤–∏–ª—å–æ–Ω–∞ %s: %v", id[1], err)
			return err
		}
		pavilion, err := db.GetPavilionByID(pavilionID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–≤–∏–ª—å–æ–Ω–∞ —Å ID %d: %v", pavilionID, err)
			return err
		}
		if pavilion == nil {
			log.Printf("–ü–∞–≤–∏–ª—å–æ–Ω —Å ID %d –Ω–µ –Ω–∞–π–¥–µ–Ω", pavilionID)
			return nil
		}
		newText = fmt.Sprintf("üè™ –ü–∞–≤–∏–ª—å–æ–Ω ‚Ññ%s\n–ü–ª–æ—â–∞–¥—å: %f\n", pavilion.Number, pavilion.Area)
		newMarkup = menu.BackButton("pavilions")

	case query.Data == "activity_types":
		activityTypes, err := db.GetAllActivityTypes()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: %v", err)
			return err
		}
		newText = "üßë‚Äçüåæ –í–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
		state := states.GetListState(query.From.ID) // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ø–∏—Å–∫–∞
		state.Scope = "activity_types"
		state.Page = 0
		newMarkup = menu.AdminActivityTypesList(activityTypes, state)

	case query.Data == "add_activity_type":
		newText = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:"
		states.Set(query.From.ID, "awaiting_activity_type_data")
		newMarkup = menu.BackButton("activity_types")

	case strings.HasPrefix(query.Data, "filter:"):
		filter := strings.TrimPrefix(query.Data, "filter:")
		states.UpdateListState(query.From.ID, func(s *states.ListState) {
			s.Filter = filter
			s.Page = 0
		})
		newText, newMarkup, err = buildUserList(query.From.ID)
		if err != nil {
			return err
		}

	case query.Data == "search_user":
		states.Set(query.From.ID, "awaiting_user_search_input")
		newText = "üîç –í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ Telegram ID –¥–ª—è –ø–æ–∏—Å–∫–∞:"
		newMarkup = menu.BackButton("list_users")

	case strings.HasPrefix(query.Data, "confirm_delete:"):
		data := strings.Split(query.Data, ":")
		var msgOutput string
		if data[1] == "0" {
			msgOutput = data[2]
		} else {
			msgOutput = data[1]
		}
		newText = fmt.Sprintf("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s?", msgOutput)
		newMarkup = menu.ConfirmDeleteUser(data[1], data[2])

	case query.Data == "reset_search":
		states.UpdateListState(query.From.ID, func(s *states.ListState) {
			s.Search = ""
			s.Page = 0
		})
		newText, newMarkup, err = buildUserList(query.From.ID)
		if err != nil {
			return err
		}

	case strings.HasPrefix(query.Data, "delete_user:"):
		data := strings.Split(query.Data, ":")
		telegramID, err := strconv.ParseInt(data[1], 10, 64)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", data[1], err)
			return err
		}
		username := data[2]
		err = db.DeleteUser(telegramID, username)
		var msg string
		if err != nil {
			msg = fmt.Sprintf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", username, err)
			log.Printf("%s", msg)
		} else {
			msg = fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω", username)
		}
		newText = msg
		newMarkup = menu.OkButton("list_users")

	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: %s", query.Data)
		// –û—Ç–≤–µ—Ç –Ω–∞ callback (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
		_ = ctx.Bot().AnswerCallbackQuery(ctx, tu.CallbackQuery(query.ID))
		return nil
	}
	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, _ = ctx.Bot().EditMessageText(ctx, &telego.EditMessageTextParams{
		ChatID:    telego.ChatID{ID: message.Chat.ID},
		MessageID: message.MessageID,
		Text:      newText,
		ReplyMarkup: &telego.InlineKeyboardMarkup{
			InlineKeyboard: newMarkup.InlineKeyboard,
		},
	})

	// –û—Ç–≤–µ—Ç –Ω–∞ callback (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
	_ = ctx.Bot().AnswerCallbackQuery(ctx, tu.CallbackQuery(query.ID))

	return nil
}

func TextMessage(ctx *th.Context, msg telego.Message) error {
	userID := msg.From.ID
	state := states.Get(userID)
	//////////////////////// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ //////////////////////////////
	if state == "awaiting_admin_data" {
		username := msg.Text
		err := db.SetUserRole(0, username, "admin")
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞: %v", err)
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞."))

		} else {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω!"))
			states.Set(userID, "main_menu")
			sendMenu(ctx, msg)
		}
	}
	//////////////////////////////// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ //////////////////////////////
	if state == "awaiting_tenant_data" {
		username := strings.TrimSpace(msg.Text)
		if username == "" {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."))
			return nil
		}
		states.SetTemp(userID, "tenant_username", username)
		states.Set(userID, "awaiting_tenant_fio")
		_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞:"))
		return nil
	}

	if state == "awaiting_tenant_fio" {
		fio := strings.TrimSpace(msg.Text)
		if fio == "" {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."))
			return nil
		}
		// –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
		states.SetTemp(userID, "tenant_fio", fio)
		states.Set(userID, "awaiting_registration_type")
		_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞:"))
		return nil
	}
	if state == "awaiting_registration_type" {
		registrationType := strings.TrimSpace(msg.Text)
		if registrationType == "" {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –ù–æ–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."))
			return nil
		}
		states.SetTemp(userID, "tenant_registration_type", registrationType)
		states.Set(userID, "awaiting_cash_register")
		_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "–£ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –µ—Å—Ç—å –∫–∞—Å—Å–æ–≤—ã–π –∞–ø–ø–∞—Ä–∞—Ç? (–¥–∞/–Ω–µ—Ç)"))
		return nil
	}
	if state == "awaiting_cash_register" {
		hasCashRegister := strings.ToLower(strings.TrimSpace(msg.Text))
		if hasCashRegister != "–¥–∞" && hasCashRegister != "–Ω–µ—Ç" {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."))
			return nil
		}
		// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
		username, ok := states.GetTemp(userID, "tenant_username")
		if !ok {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ username –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."))
			states.Set(userID, "main_menu")
			sendMenu(ctx, msg)
			return nil
		}
		fio, ok := states.GetTemp(userID, "tenant_fio")
		if !ok {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –§–ò–û –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."))
			states.Set(userID, "main_menu")
			sendMenu(ctx, msg)
			return nil
		}
		registrationType, ok := states.GetTemp(userID, "tenant_registration_type")
		if !ok {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."))
			states.Set(userID, "main_menu")
			sendMenu(ctx, msg)
			return nil
		}
		var hasCashRegisterBool bool

		if hasCashRegister == "–¥–∞" {
			hasCashRegisterBool = true
		} else {
			hasCashRegisterBool = false
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –≤ –ë–î
		tenantId, err := db.AddTenant(username, fio, registrationType, hasCashRegisterBool)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: %v", err)
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞."))

			states.Set(userID, "main_menu")
			sendMenu(ctx, msg)
			return nil
		} else {
			states.SetTemp(userID, "tenant_id", strconv.Itoa(int(tenantId)))
			states.Set(userID, "awaiting_tenant_extended_data")
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚úÖ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ? (–¥–∞/–Ω–µ—Ç)"))
		}
		return nil
	}

	if state == "awaiting_tenant_extended_data" {
		answer := strings.ToLower(strings.TrimSpace(msg.Text))
		if answer != "–¥–∞" && answer != "–Ω–µ—Ç" {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'."))
			return nil
		}
		if answer == "–¥–∞" {
			states.Set(userID, "awaiting_activity_type_select")
		} else {
			// –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
			states.ClearTemp(userID)
			states.Set(userID, "main_menu")
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"))
			sendMenu(ctx, msg)
		}
		return nil
	}

	if state == "awaiting_activity_type_select" {
		ActivityTypes, err := db.GetAllActivityTypes()
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: %v", err)
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."))
			states.Set(userID, "main_menu")
			states.ClearTemp(userID)
			sendMenu(ctx, msg)
			return nil
		}
		selectedMap := make(map[int]bool)
		states.SetTemp(userID, "activity_selection_process", "")
		_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤)").WithReplyMarkup(menu.AdminActivityTypeSelect(ActivityTypes, selectedMap)))
	}
	///////////////////////////////////////// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞–≤–∏–ª—å–æ–Ω–∞ //////////////////////////////
	if state == "adding_pavilion_number" {
		number := strings.TrimSpace(msg.Text)
		states.SetTemp(userID, "pavilion_number", number)
		states.Set(userID, "adding_pavilion_area")

		_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –ø–∞–≤–∏–ª—å–æ–Ω–∞ –≤ –º¬≤ (–ø—Ä–∏–º–µ—Ä 15.5):"))
		return nil
	}
	if state == "adding_pavilion_area" {
		input := strings.TrimSpace(msg.Text)
		area, err := strconv.ParseFloat(input, 64) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —á–∏—Å–ª–∞
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–ª–æ—â–∞–¥–∏: %v", err)
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –ü–ª–æ—â–∞–¥—å —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."))
			return nil
		}
		// –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
		number, ok := states.GetTemp(userID, "pavilion_number")
		if !ok {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ."))
			states.Set(userID, "main_menu")
			sendMenu(ctx, msg)
			return nil
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
		err = db.AddPavilion(number, area)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞–≤–∏–ª—å–æ–Ω–∞: %v", err)
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–∞–≤–∏–ª—å–æ–Ω–∞."))
		} else {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚úÖ –ü–∞–≤–∏–ª—å–æ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"))
		}

		states.ClearTemp(userID)
		states.Set(userID, "main_menu")
		sendMenu(ctx, msg)
		return nil
	}
	////////////////////////////////////////////// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ //////////////////////////////
	if state == "awaiting_activity_type_data" {
		name := strings.TrimSpace(msg.Text)
		if name == "" {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."))
			return nil
		}
		err := db.AddActivityType(name)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: %v", err)
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–∏–¥–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."))
		} else {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚úÖ –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"))
		}
		_, ok := states.GetTemp(userID, "activity_selection_process")
		if ok {
			states.Set(userID, "awaiting_activity_type_select")
			return nil
		} else {
			states.Set(userID, "main_menu")
			sendMenu(ctx, msg)
			return nil
		}
	}
	///////////////////// –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è //////////////////////////////
	if state == "awaiting_user_search_input" {
		search := strings.TrimSpace(msg.Text)
		states.UpdateListState(userID, func(s *states.ListState) {
			s.Search = search
			s.Page = 0
		})
		states.Set(userID, "main_menu")

		text, markup, err := buildUserList(userID)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v\n", err)
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."))
			sendMenu(ctx, msg)
		} else {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), text).WithReplyMarkup(markup))
		}
		return nil
	}
	if state == "main_menu" {
		sendMenu(ctx, msg)
	}

	return nil
}
