package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/AlexEagle1535/market-rent-bot/db"
	"github.com/AlexEagle1535/market-rent-bot/menu"
	"github.com/AlexEagle1535/market-rent-bot/states"

	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"
)

func sendMenu(ctx *th.Context, msg telego.Message) error {
	role, err := db.GetUserRole(msg.From.ID, msg.From.Username)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", msg.From.ID, err)
		return err
	}
	switch role {
	case "admin":
		_, _ = ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(msg.Chat.ID),
			"üîê –ê–¥–º–∏–Ω –º–µ–Ω—é",
		).WithReplyMarkup(menu.Admin()))
	case "tenant":
		_, _ = ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(msg.Chat.ID),
			"üë§ –ú–µ–Ω—é –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞",
		).WithReplyMarkup(menu.Tenant()))
	default:
		_, _ = ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(msg.Chat.ID),
			"üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
		))
	}
	return nil
}

func buildUserList(userID int64) (string, *telego.InlineKeyboardMarkup, error) {
	state := states.GetUserListState(userID)

	var users []db.User
	var err error

	// –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
	if state.Search != "" {
		users, err = db.SearchUsers(state.Search, state.Filter)
	} else {
		switch state.Filter {
		case "admin":
			users, err = db.GetUsersByRole("admin")
		case "tenant":
			users, err = db.GetUsersByRole("tenant")
		default:
			users, err = db.GetAllUsers()
		}
	}
	if err != nil {
		return "", nil, err
	}

	text := "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
	if state.Search != "" {
		text += fmt.Sprintf("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ: %s", state.Search)
	}
	markup := menu.AdminUserList(users, state)
	return text, markup, nil
}

func Start(ctx *th.Context, msg telego.Message) error {
	err := sendMenu(ctx, msg)
	if err != nil {
		return err
	}
	return nil
}

func CallbackQuery(ctx *th.Context, query telego.CallbackQuery) error {
	if query.Message == nil {
		log.Println("‚ö†Ô∏è CallbackQuery.Message is nil ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –æ—Ç inline-–∫–Ω–æ–ø–∫–∏ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
		return nil
	}
	message := query.Message.Message()
	if message == nil {
		return nil
	}

	var newText string
	var newMarkup *telego.InlineKeyboardMarkup
	var err error

	switch {
	// === –û–±—â–µ–µ ===
	case query.Data == "go_back":
		role, err := db.GetUserRole(query.From.ID, query.From.Username)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", query.From.ID, err)
			return err
		}
		states.Set(query.From.ID, "main_menu")
		if role == "admin" {
			newText = "üîê –ê–¥–º–∏–Ω –º–µ–Ω—é"
			newMarkup = menu.Admin()
		} else {
			newText = "üë§ –ú–µ–Ω—é –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞"
			newMarkup = menu.Tenant()
		}

	// === –ê–¥–º–∏–Ω ===
	case query.Data == "admin_tenants":
		newText = "üßë‚Äçüíº –†–∞–∑–¥–µ–ª: –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã"
		newMarkup = menu.AdminTetants()

	case query.Data == "admin_broadcast":
		newText = "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)."
		newMarkup = menu.BackButton("go_back")

	case query.Data == "admin_approvals":
		newText = "‚úÖ –ó–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)."
		newMarkup = menu.BackButton("go_back")

	// === –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ===
	case query.Data == "import_csv":
		newText = "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤ –∏–∑ CSV (–∑–∞–≥–ª—É—à–∫–∞)."
		newMarkup = menu.BackButton("go_back")

	case query.Data == "list_tenants":
		newText = "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤:\n1. –ò–ü –ò–≤–∞–Ω–æ–≤\n2. –û–û–û –†—ã–Ω–æ–∫\n(–∑–∞–≥–ª—É—à–∫–∞)"
		newMarkup = menu.BackButton("go_back")

	case query.Data == "admin_users":
		newText = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã"
		newMarkup = menu.AdminUsers()

	case query.Data == "add_user":
		newText = "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
		newMarkup = menu.AddUser()

	case query.Data == "add_admin":
		newText = "–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
		states.Set(query.From.ID, "awaiting_admin_data")
		newMarkup = menu.BackButton("go_back")

	case query.Data == "add_tenant":
		newText = "–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞:"
		states.Set(query.From.ID, "awaiting_tenant_data")
		newMarkup = menu.BackButton("go_back")

	case query.Data == "list_users":
		states.GetUserListState(query.From.ID).Page = 0
		newText, newMarkup, err = buildUserList(query.From.ID)
		if err != nil {
			return err
		}

	case query.Data == "page_next":
		states.UpdateUserListState(query.From.ID, func(s *states.UserListState) {
			s.Page++
		})
		newText, newMarkup, err = buildUserList(query.From.ID)
		if err != nil {
			return err
		}

	case query.Data == "page_prev":
		states.UpdateUserListState(query.From.ID, func(s *states.UserListState) {
			if s.Page > 0 {
				s.Page--
			}
		})
		newText, newMarkup, err = buildUserList(query.From.ID)
		if err != nil {
			return err
		}

	case strings.HasPrefix(query.Data, "filter:"):
		filter := strings.TrimPrefix(query.Data, "filter:")
		states.UpdateUserListState(query.From.ID, func(s *states.UserListState) {
			s.Filter = filter
			s.Page = 0
		})
		newText, newMarkup, err = buildUserList(query.From.ID)
		if err != nil {
			return err
		}

	case query.Data == "search_user":
		states.Set(query.From.ID, "awaiting_search_input")
		newText = "üîç –í–≤–µ–¥–∏—Ç–µ username –∏–ª–∏ Telegram ID –¥–ª—è –ø–æ–∏—Å–∫–∞:"
		newMarkup = menu.BackButton("list_users")

	case strings.HasPrefix(query.Data, "confirm_delete:"):
		data := strings.Split(query.Data, ":")
		var msgOutput string
		if data[1] == "0" {
			msgOutput = data[2]
		} else {
			msgOutput = data[1]
		}
		newText = fmt.Sprintf("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s?", msgOutput)
		newMarkup = menu.ConfirmDeleteUser(data[1], data[2])

	case query.Data == "reset_search":
		states.UpdateUserListState(query.From.ID, func(s *states.UserListState) {
			s.Search = ""
			s.Page = 0
		})
		newText, newMarkup, err = buildUserList(query.From.ID)
		if err != nil {
			return err
		}

	case strings.HasPrefix(query.Data, "delete_user:"):
		data := strings.Split(query.Data, ":")
		telegramID, err := strconv.ParseInt(data[1], 10, 64)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", data[1], err)
			return err
		}
		username := data[2]
		err = db.DeleteUser(telegramID, username)
		var msg string
		if err != nil {
			msg = fmt.Sprintf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", username, err)
			log.Printf(msg)
		} else {
			msg = fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω", username)
		}
		newText = msg
		newMarkup = menu.OkButton("list_users")

	default:
		log.Printf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback: %s", query.Data)
		// –û—Ç–≤–µ—Ç –Ω–∞ callback (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
		_ = ctx.Bot().AnswerCallbackQuery(ctx, tu.CallbackQuery(query.ID))
		return nil
	}
	// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, _ = ctx.Bot().EditMessageText(ctx, &telego.EditMessageTextParams{
		ChatID:    telego.ChatID{ID: message.Chat.ID},
		MessageID: message.MessageID,
		Text:      newText,
		ReplyMarkup: &telego.InlineKeyboardMarkup{
			InlineKeyboard: newMarkup.InlineKeyboard,
		},
	})

	// –û—Ç–≤–µ—Ç –Ω–∞ callback (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
	_ = ctx.Bot().AnswerCallbackQuery(ctx, tu.CallbackQuery(query.ID))

	return nil
}

func TextMessage(ctx *th.Context, msg telego.Message) error {
	userID := msg.From.ID
	state := states.Get(userID)

	if state == "awaiting_admin_data" {
		username := msg.Text
		err := db.SetUserRole(0, username, "admin")
		if err != nil {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞."))

		} else {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω!"))
			states.Set(userID, "main_menu")
		}
	}
	if state == "awaiting_tenant_data" {
		username := msg.Text
		err := db.SetUserRole(0, username, "tenant")
		if err != nil {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞."))
		} else {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚úÖ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!"))
			states.Set(userID, "main_menu")
		}
	}
	if state == "awaiting_search_input" {
		search := strings.TrimSpace(msg.Text)
		states.UpdateUserListState(userID, func(s *states.UserListState) {
			s.Search = search
			s.Page = 0
		})
		states.Set(userID, "main_menu")

		text, markup, err := buildUserList(userID)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v\n", err)
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."))
		} else {
			_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), text).WithReplyMarkup(markup))
		}
		return nil
	}
	sendMenu(ctx, msg)
	return nil
}
