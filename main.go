package main

import (
	"context"
	"database/sql"
	"log"
	"os"
	"strings"
	"sync"

	"github.com/AlexEagle1535/market-rent-bot/db"
	"github.com/joho/godotenv"
	"github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
	tu "github.com/mymmrac/telego/telegoutil"
)

var (
	userStates   = make(map[int64]string)   // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userData     = make(map[int64][]string) // –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	stateMutex   = &sync.Mutex{}            // –º—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	stateDefault = "main_menu"              // –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
)

func setState(userID int64, state string) {
	stateMutex.Lock()
	defer stateMutex.Unlock()
	userStates[userID] = state
}

func getState(userID int64) string {
	stateMutex.Lock()
	defer stateMutex.Unlock()
	state, ok := userStates[userID]
	if !ok {
		return stateDefault
	}
	return state
}

func sendMenu(conn *sql.DB, ctx *th.Context, msg telego.Message) error {
	role, err := db.GetUserRole(conn, msg.From.ID, msg.From.Username)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", msg.From.ID, err)
		return err
	}
	switch role {
	case "admin":
		_, _ = ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(msg.Chat.ID),
			"üîê –ê–¥–º–∏–Ω –º–µ–Ω—é",
		).WithReplyMarkup(adminMenu()))
	case "tenant":
		_, _ = ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(msg.Chat.ID),
			"üë§ –ú–µ–Ω—é –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞",
		).WithReplyMarkup(tenantMenu()))
	default:
		_, _ = ctx.Bot().SendMessage(ctx, tu.Message(
			tu.ID(msg.Chat.ID),
			"üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.",
		))
	}
	return nil
}

func main() {
	_ = godotenv.Load()
	token := os.Getenv("BOT_TOKEN")
	// –ß—Ç–µ–Ω–∏–µ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ª–∞–π—Å
	var admins = strings.Split(os.Getenv("ADMINS"), ",")
	conn := db.InitDB()
	defer conn.Close()
	for _, admin := range admins {
		admin = strings.TrimSpace(admin) // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
		if admin == "" {
			log.Fatal("–ü—É—Å—Ç–æ–π username –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤")
		}
		err := db.SetUserRole(conn, 0, admin, "admin")
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ username –∞–¥–º–∏–Ω–æ–º
	ctx := context.Background()
	bot, err := telego.NewBot(token, telego.WithDefaultLogger(true, true))
	if err != nil {
		log.Fatal(err)
	}

	// –û—Ç–∫–ª—é—á–∞–µ–º Webhook (–µ—Å–ª–∏ –≤–¥—Ä—É–≥)
	_ = bot.DeleteWebhook(ctx, nil)

	// –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	updates, err := bot.UpdatesViaLongPolling(ctx, &telego.GetUpdatesParams{Timeout: 60})
	if err != nil {
		log.Fatal(err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	bh, err := th.NewBotHandler(bot, updates)
	if err != nil {
		log.Fatal(err)
	}
	defer bh.Stop()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ /start
	bh.HandleMessage(func(ctx *th.Context, msg telego.Message) error {
		err := sendMenu(conn, ctx, msg)
		if err != nil {
			return err
		}
		return nil
	}, th.CommandEqual("start"))

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
	bh.HandleCallbackQuery(func(ctx *th.Context, query telego.CallbackQuery) error {
		message := query.Message.Message()
		if message == nil {
			return nil
		}

		var newText string
		var newMarkup *telego.InlineKeyboardMarkup

		switch query.Data {
		// === –û–±—â–µ–µ ===
		case "go_back":
			role, err := db.GetUserRole(conn, query.From.ID, query.From.Username)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", query.From.ID, err)
				return err
			}
			setState(query.From.ID, "main_menu")
			if role == "admin" {
				newText = "üîê –ê–¥–º–∏–Ω –º–µ–Ω—é"
				newMarkup = adminMenu()
			} else {
				newText = "üë§ –ú–µ–Ω—é –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞"
				newMarkup = tenantMenu()
			}

		// === –ê–¥–º–∏–Ω ===
		case "admin_tenants":
			newText = "üßë‚Äçüíº –†–∞–∑–¥–µ–ª: –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã"
			newMarkup = tenantAdminMenu()

		case "admin_broadcast":
			newText = "üì¢ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)."
			newMarkup = backButton()

		case "admin_approvals":
			newText = "‚úÖ –ó–∞–¥–∞—á–∏ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)."
			newMarkup = backButton()

		// === –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ ===
		case "import_csv":
			newText = "üì• –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤ –∏–∑ CSV (–∑–∞–≥–ª—É—à–∫–∞)."
			newMarkup = backButton()

		case "list_tenants":
			newText = "üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤:\n1. –ò–ü –ò–≤–∞–Ω–æ–≤\n2. –û–û–û –†—ã–Ω–æ–∫\n(–∑–∞–≥–ª—É—à–∫–∞)"
			newMarkup = backButton()

		case "admin_users":
			newText = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã"
			newMarkup = usersAdminMenu()

		case "add_user":
			newText = "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
			newMarkup = addUserMenu()

		case "add_admin":
			newText = "–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:"
			setState(query.From.ID, "awaiting_admin_data")
			newMarkup = backButton()

		case "add_tenant":
			newText = "–í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞:"
			setState(query.From.ID, "awaiting_tenant_data")
			newMarkup = backButton()
		}
		// –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		_, _ = ctx.Bot().EditMessageText(ctx, &telego.EditMessageTextParams{
			ChatID:    telego.ChatID{ID: message.Chat.ID},
			MessageID: message.MessageID,
			Text:      newText,
			ReplyMarkup: &telego.InlineKeyboardMarkup{
				InlineKeyboard: newMarkup.InlineKeyboard,
			},
		})

		// –û—Ç–≤–µ—Ç –Ω–∞ callback (—á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
		_ = ctx.Bot().AnswerCallbackQuery(ctx, tu.CallbackQuery(query.ID))

		return nil
	}, th.AnyCallbackQueryWithMessage())

	// –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π
	bh.HandleMessage(func(ctx *th.Context, msg telego.Message) error {
		userID := msg.From.ID
		state := getState(userID)

		if state == "awaiting_admin_data" {
			username := msg.Text
			err := db.SetUserRole(conn, 0, username, "admin")
			if err != nil {
				_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞."))

			} else {
				_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚úÖ –ê–¥–º–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω!"))
				setState(userID, "main_menu")
			}
		}
		if state == "awaiting_tenant_data" {
			username := msg.Text
			err := db.SetUserRole(conn, 0, username, "tenant")
			if err != nil {
				_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞."))
			} else {
				_, _ = ctx.Bot().SendMessage(ctx, tu.Message(tu.ID(msg.Chat.ID), "‚úÖ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω!"))
				setState(userID, "main_menu")
			}
		}
		sendMenu(conn, ctx, msg)
		return nil
	})
	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	go func() {
		if err := bh.Start(); err != nil {
			log.Fatal(err)
		}
	}()

	// –ë–ª–æ–∫–∏—Ä—É–µ–º main
	select {}
}

func adminMenu() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞").WithCallbackData("admin_broadcast"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è").WithCallbackData("admin_approvals"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üë®‚Äçüíº –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã").WithCallbackData("admin_tenants"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã").WithCallbackData("admin_users"),
		),
	)
}

func tenantAdminMenu() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞").WithCallbackData("import_csv"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤").WithCallbackData("list_tenants"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("go_back"),
		),
	)
}

func usersAdminMenu() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞").WithCallbackData("import_csv"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π").WithCallbackData("list_tenants"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è").WithCallbackData("add_user"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("go_back"),
		),
	)
}

func addUserMenu() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞").WithCallbackData("add_admin"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞").WithCallbackData("add_tenant"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("admin_users"),
		),
	)
}

func tenantMenu() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏").WithCallbackData("tenant_payments"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üìÑ –ú–æ–π –¥–æ–≥–æ–≤–æ—Ä").WithCallbackData("tenant_contract"),
		),
	)
}

func backButton() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("go_back"),
		),
	)
}
