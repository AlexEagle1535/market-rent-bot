package menu

import (
	"fmt"

	"github.com/AlexEagle1535/market-rent-bot/db"
	"github.com/AlexEagle1535/market-rent-bot/states"
	"github.com/mymmrac/telego"
	tu "github.com/mymmrac/telego/telegoutil"
)

func Admin() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞").WithCallbackData("admin_broadcast"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è").WithCallbackData("admin_approvals"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üë®‚Äçüíº –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã").WithCallbackData("admin_tenants"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üß∫ –†—ã–Ω–æ–∫").WithCallbackData("admin_market"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã").WithCallbackData("admin_users"),
		),
	)
}

func AdminTenants() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞").WithCallbackData("import_csv"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤").WithCallbackData("list_tenants"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("go_back"),
		),
	)
}

func AdminTenantsList(tanants []db.Tenant, state *states.ListState) *telego.InlineKeyboardMarkup {
	const pageSize = 10
	page := state.Page
	start := page * pageSize
	if start >= len(tanants) {
		page = 0
		state.Page = 0
		start = 0
	}
	end := start + pageSize
	if end > len(tanants) {
		end = len(tanants)
	}
	slice := tanants[start:end]

	rows := make([][]telego.InlineKeyboardButton, 0)

	// –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞" –∏ –ø–æ–∏—Å–∫
	rows = append(rows, tu.InlineKeyboardRow(
		tu.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å").WithCallbackData("add_tenant"),
		tu.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫").WithCallbackData("search_tenant"),
	))

	// –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤
	for _, t := range slice {
		label := fmt.Sprintf("%s", t.FullName)
		viewBtn := tu.InlineKeyboardButton(label).WithCallbackData(fmt.Sprintf("view_tenant:%d", t.ID))
		rows = append(rows, tu.InlineKeyboardRow(viewBtn))
	}

	// –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥
	pageRow := []telego.InlineKeyboardButton{}
	if page > 0 {
		pageRow = append(pageRow, tu.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞").WithCallbackData("page_prev"))
	}
	if end < len(tanants) {
		pageRow = append(pageRow, tu.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞").WithCallbackData("page_next"))
	}
	if len(pageRow) > 0 {
		rows = append(rows, pageRow)
	}

	rows = append(rows, tu.InlineKeyboardRow(
		tu.InlineKeyboardButton("üîô –í –º–µ–Ω—é").WithCallbackData("go_back"),
	))

	return tu.InlineKeyboard(rows...)
}

func AdminMarket() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üè™ –ü–∞–≤–∏–ª—å–æ–Ω—ã").WithCallbackData("pavilions"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üßë‚Äçüåæ –í–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏").WithCallbackData("activity_types"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("go_back"),
		),
	)
}

func AdminPavilionList(pavilions []db.Pavilion, state *states.ListState) *telego.InlineKeyboardMarkup {
	const pageSize = 10
	page := state.Page
	start := page * pageSize
	if start >= len(pavilions) {
		page = 0
		state.Page = 0
		start = 0
	}
	end := start + pageSize
	if end > len(pavilions) {
		end = len(pavilions)
	}
	slice := pavilions[start:end]

	rows := make([][]telego.InlineKeyboardButton, 0)

	// –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –ø–∞–≤–∏–ª—å–æ–Ω" –∏ –ø–æ–∏—Å–∫
	rows = append(rows, tu.InlineKeyboardRow(
		tu.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å").WithCallbackData("add_pavilion"),
		tu.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫").WithCallbackData("search_pavilion"),
	))

	// –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–∞–≤–∏–ª—å–æ–Ω–æ–≤
	for _, p := range slice {
		label := fmt.Sprintf("‚Ññ %s", p.Number)
		viewBtn := tu.InlineKeyboardButton(label).WithCallbackData(fmt.Sprintf("view_pavilion:%d", p.ID))
		rows = append(rows, tu.InlineKeyboardRow(viewBtn))
	}

	// –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥
	pageRow := []telego.InlineKeyboardButton{}
	if page > 0 {
		pageRow = append(pageRow, tu.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞").WithCallbackData("page_prev"))
	}
	if end < len(pavilions) {
		pageRow = append(pageRow, tu.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞").WithCallbackData("page_next"))
	}
	if len(pageRow) > 0 {
		rows = append(rows, pageRow)
	}

	rows = append(rows, tu.InlineKeyboardRow(
		tu.InlineKeyboardButton("üîô –í –º–µ–Ω—é").WithCallbackData("go_back"),
	))

	return tu.InlineKeyboard(rows...)
}

func AdminActivityTypesList(types []db.ActivityType, state *states.ListState) *telego.InlineKeyboardMarkup {
	const pageSize = 10
	page := state.Page
	start := page * pageSize
	if start >= len(types) {
		page = 0
		state.Page = 0
		start = 0
	}
	end := start + pageSize
	if end > len(types) {
		end = len(types)
	}
	slice := types[start:end]

	rows := make([][]telego.InlineKeyboardButton, 0)

	// –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏" –∏ –ø–æ–∏—Å–∫
	rows = append(rows, tu.InlineKeyboardRow(
		tu.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å").WithCallbackData("add_activity_type"),
		tu.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫").WithCallbackData("search_activity_type"),
	))

	// –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–æ–≤ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	for _, t := range slice {
		label := t.Name
		viewBtn := tu.InlineKeyboardButton(label).WithCallbackData("noop")
		rows = append(rows, tu.InlineKeyboardRow(viewBtn))
	}

	// –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥
	pageRow := []telego.InlineKeyboardButton{}
	if page > 0 {
		pageRow = append(pageRow, tu.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞").WithCallbackData("page_prev"))
	}
	if end < len(types) {
		pageRow = append(pageRow, tu.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞").WithCallbackData("page_next"))
	}
	if len(pageRow) > 0 {
		rows = append(rows, pageRow)
	}

	rows = append(rows, tu.InlineKeyboardRow(
		tu.InlineKeyboardButton("üîô –í –º–µ–Ω—é").WithCallbackData("go_back"),
	))

	return tu.InlineKeyboard(rows...)
}

func AdminActivityTypeSelect(types []db.ActivityType, selected map[int]bool) *telego.InlineKeyboardMarkup {
	rows := make([][]telego.InlineKeyboardButton, 0)

	for _, t := range types {
		label := t.Name
		if selected[t.ID] {
			label = "‚úÖ " + label
		}
		btn := tu.InlineKeyboardButton(label).
			WithCallbackData(fmt.Sprintf("select_activity_type:%d", t.ID))
		rows = append(rows, tu.InlineKeyboardRow(btn))
	}

	// –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
	rows = append(rows, tu.InlineKeyboardRow(
		tu.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å").WithCallbackData("add_activity_type"),
		tu.InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å").WithCallbackData("finish_activity_selection"),
	))

	return tu.InlineKeyboard(rows...)
}

func AdminPavilionSelect(pavilions []db.Pavilion) *telego.InlineKeyboardMarkup {
	rows := make([][]telego.InlineKeyboardButton, 0)

	for _, p := range pavilions {
		label := fmt.Sprintf("‚Ññ %s", p.Number)
		btn := tu.InlineKeyboardButton(label).
			WithCallbackData(fmt.Sprintf("select_pavilion:%d", p.ID))
		rows = append(rows, tu.InlineKeyboardRow(btn))
	}

	// –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞
	rows = append(rows, tu.InlineKeyboardRow(
		tu.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å").WithCallbackData("add_pavilion"),
	))

	return tu.InlineKeyboard(rows...)
}

func AdminUsers() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üì• –ò–º–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞").WithCallbackData("import_csv"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π").WithCallbackData("list_users"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è").WithCallbackData("add_user"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("go_back"),
		),
	)
}

func AddUser() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞").WithCallbackData("add_admin"),
		),
		// tu.InlineKeyboardRow(
		// 	tu.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞").WithCallbackData("add_tenant"),
		// ),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData("admin_users"),
		),
	)
}

func AdminUserList(users []db.User, state *states.ListState) *telego.InlineKeyboardMarkup {
	const pageSize = 10
	page := state.Page
	search := state.Search
	start := page * pageSize
	if start >= len(users) {
		page = 0
		state.Page = 0
		start = 0
	}
	end := start + pageSize
	if end > len(users) {
		end = len(users)
	}
	slice := users[start:end]

	rows := make([][]telego.InlineKeyboardButton, 0)

	// –§–∏–ª—å—Ç—Ä—ã
	filterRow := tu.InlineKeyboardRow(
		tu.InlineKeyboardButton("üë• –í—Å–µ").WithCallbackData("filter:all"),
		tu.InlineKeyboardButton("üõ° –ê–¥–º–∏–Ω—ã").WithCallbackData("filter:admin"),
		tu.InlineKeyboardButton("üè† –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—ã").WithCallbackData("filter:tenant"),
	)
	rows = append(rows, filterRow)

	// –ü–æ–∏—Å–∫
	rows = append(rows, tu.InlineKeyboardRow(
		tu.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫").WithCallbackData("search_user"),
	))

	// –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	for _, u := range slice {
		username := "null"
		if u.Username.Valid {
			username = u.Username.String
		}
		telegramID := "0"
		if u.TelegramID.Valid {
			telegramID = fmt.Sprintf("%d", u.TelegramID.Int64)
		}

		label := fmt.Sprintf("%s - %s", username, u.Role)
		userBtn := tu.InlineKeyboardButton(label).WithCallbackData("noop")
		delBtn := tu.InlineKeyboardButton("‚ùå").WithCallbackData(fmt.Sprintf("confirm_delete:%s:%s", telegramID, username))
		rows = append(rows, tu.InlineKeyboardRow(userBtn, delBtn))
	}

	// –ü–∞–≥–∏–Ω–∞—Ü–∏—è
	pagination := []telego.InlineKeyboardButton{}
	if page > 0 {
		pagination = append(pagination, tu.InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞").WithCallbackData("page_prev"))
	}
	if end < len(users) {
		pagination = append(pagination, tu.InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞").WithCallbackData("page_next"))
	}
	if len(pagination) > 0 {
		rows = append(rows, pagination)
	}

	if search != "" {
		rows = append(rows, tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫").WithCallbackData("reset_search"),
		))
	}

	// –ù–∞–∑–∞–¥
	rows = append(rows, tu.InlineKeyboardRow(
		tu.InlineKeyboardButton("üîô –í –º–µ–Ω—é").WithCallbackData("admin_users"),
	))

	return tu.InlineKeyboard(rows...)
}

func ConfirmDeleteUser(telegramID, username string) *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å").WithCallbackData(fmt.Sprintf("delete_user:%s:%s", telegramID, username)),
			tu.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞").WithCallbackData("list_users"),
		),
	)
}

func Tenant() *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üí≥ –ü–ª–∞—Ç–µ–∂–∏").WithCallbackData("tenant_payments"),
		),
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üìÑ –ú–æ–π –¥–æ–≥–æ–≤–æ—Ä").WithCallbackData("tenant_contract"),
		),
	)
}

func OkButton(data string) *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("‚úÖ –û–ö").WithCallbackData(data),
		),
	)
}

func BackButton(data string) *telego.InlineKeyboardMarkup {
	return tu.InlineKeyboard(
		tu.InlineKeyboardRow(
			tu.InlineKeyboardButton("üîô –ù–∞–∑–∞–¥").WithCallbackData(data),
		),
	)
}
